name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to Dokploy'
        required: false
        type: boolean
        default: false
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true
      - name: Trust mise config
        run: mise trust mise.toml
      - name: Install tools
        run: mise install
      - name: Validate configurations
        run: mise run validate-config
      - name: Security scan
        run: mise run security-check
        continue-on-error: true
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true
      - name: Trust mise config
        run: mise trust mise.toml
      - name: Install tools
        run: mise install
      - name: Run linters
        run: mise run lint
      - name: Check Markdown
        uses: DavidAnson/markdownlint-cli2-action@v20
        with:
          globs: '**/*.md'
          config: '.markdownlint.json'
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker-compose.yml
          config: .hadolint.yaml
          failure-threshold: warning
        continue-on-error: true
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [validate, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: |
          docker compose build --no-cache
      - name: Save Docker image
        run: |
          docker save happy-fork-deployment-happy-web-custom:latest | gzip > happy-image.tar.gz
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: happy-docker-image
          path: happy-image.tar.gz
          retention-days: 1
  test:
    name: Test Container
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: happy-docker-image
      - name: Load Docker image
        run: |
          docker load < happy-image.tar.gz
      - name: Test container startup
        run: |
          docker compose up -d
          sleep 10
          docker ps | grep happy-web-custom
          docker compose logs
          docker compose down
  deploy:
    name: Deploy to Dokploy
    runs-on: ubuntu-latest
    needs: [build, test]
    if: "github.event_name == 'push' && \ngithub.ref == 'refs/heads/main' ||\ngithub.event.inputs.deploy == 'true'\n"
    environment:
      name: production
      url: http://100.119.254.98:8082
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Age Key
        run: |
          mkdir -p ~/.config/mise
          echo "${{ secrets.AGE_PRIVATE_KEY }}" | base64 -d > ~/.config/mise/age.txt
          chmod 600 ~/.config/mise/age.txt
      - name: Setup mise and decrypt secrets
        uses: jdx/mise-action@v2
        with:
          install: true
      - name: Trust mise config
        run: |
          mise trust mise.toml
          mise settings set sops.age_key_file ~/.config/mise/age.txt
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DOKPLOY_SSH_KEY }}
      - name: Deploy via Dokploy API
        run: |
          # Extract secrets using mise
          eval "$(mise env)"

          # Trigger deployment via webhook if configured
          if [ -n "$GITHUB_WEBHOOK_SECRET" ] && [ "$GITHUB_WEBHOOK_SECRET" != "placeholder" ]; then
            curl -X POST \
              -H "X-Hub-Signature: sha256=$(echo -n '{"ref":"refs/heads/main","repository":{"full_name":"${{ github.repository }}"}}' | openssl dgst -sha256 -hmac "$GITHUB_WEBHOOK_SECRET" | sed 's/^.*= //')" \
              -H "Content-Type: application/json" \
              -d '{"ref":"refs/heads/main","repository":{"full_name":"${{ github.repository }}"}}' \
              http://100.119.254.98:3000/api/webhook/github/happy-assistant
          fi
      - name: Deploy via SSH (fallback)
        run: |
          ssh -o StrictHostKeyChecking=no brett@100.119.254.98 << 'EOF'
            cd /home/brett/happy-fork-deployment
            git pull origin main
            export SOPS_AGE_KEY_FILE=~/.config/mise/age.txt
            eval "$(mise env)"
            docker compose down
            docker compose build --no-cache
            docker compose up -d
            docker ps | grep happy-web-custom
          EOF
      - name: Health check
        run: |
          echo "Waiting for service to be healthy..."
          for i in {1..30}; do
            if curl -f http://100.119.254.98:8082 2>/dev/null; then
              echo "Service is healthy!"
              exit 0
            fi
            echo "Attempt $i/30 failed, waiting 5 seconds..."
            sleep 5
          done
          echo "Health check failed after 30 attempts"
          exit 1
      - name: Notify Dokploy
        if: success()
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"project": "happy-assistant", "status": "deployed", "version": "${{ github.sha }}"}' \
            http://100.119.254.98:3000/api/deployments \
            || true
        continue-on-error: true
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate changelog
        id: changelog
        run: |
          {
            echo "CHANGELOG<<EOF"
            git log --pretty=format:"- %s" HEAD^..HEAD
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.CHANGELOG }}

            ## Deployment
            - Environment: Production
            - URL: http://100.119.254.98:8082
            - Dokploy Dashboard: http://100.119.254.98:3000
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
